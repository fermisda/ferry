
-- Lydia's users have requested multiple hours types to be tracked project.

drop table if exists adjustments;
drop table if exists allocations;
drop table if exists projects;

CREATE  TABLE "public".projects (
	projid               integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY  ,
	groupid              integer  NOT NULL  ,
	fiscal_year          integer  NOT NULL  ,
	project_class        text    ,
	piname               text    ,
	email                text    ,
	last_updated         timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL  ,
	CONSTRAINT pk_projects PRIMARY KEY ( projid ),
	CONSTRAINT unq_projects UNIQUE ( groupid, fiscal_year ) ,
	CONSTRAINT unq_projects_projid UNIQUE ( projid )
 ) ;

CREATE  TABLE "public".allocations (
	allocid              integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY  ,
	projid               integer  NOT NULL  ,
	"type"               text  NOT NULL  ,
	original_hours       double precision  NOT NULL  ,
	used_hours           double precision DEFAULT 0   ,
	last_updated         timestamptz  NOT NULL  ,
	CONSTRAINT pk_allocations PRIMARY KEY ( allocid ),
	CONSTRAINT unq_allocations UNIQUE ( projid, "type" )
 ) ;

ALTER TABLE "public".allocations ADD CONSTRAINT check_type CHECK ( ( (type = 'cpu':: text) OR (type = 'gpu':: text)) ) ;

CREATE  TABLE "public".adjustments (
	allocid              integer  NOT NULL  ,
	create_date          date DEFAULT CURRENT_DATE NOT NULL  ,
	hours_adjusted       double precision  NOT NULL  ,
	comments             text    ,
	CONSTRAINT pk_adjustments PRIMARY KEY ( allocid, create_date )
 ) ;

ALTER TABLE "public".projects ADD CONSTRAINT fk_allocations_groups FOREIGN KEY ( groupid ) REFERENCES "public".groups( groupid )   ;

ALTER TABLE "public".allocations ADD CONSTRAINT fk_allocations_projects FOREIGN KEY ( projid ) REFERENCES "public".projects( projid )   ;

ALTER TABLE "public".adjustments ADD CONSTRAINT fk_adjustments_allocations FOREIGN KEY ( allocid ) REFERENCES "public".allocations( allocid )   ;


CREATE TRIGGER projects_common_update_stamp BEFORE INSERT OR UPDATE ON projects
    FOR EACH ROW EXECUTE PROCEDURE common_update_stamp();

CREATE TRIGGER allocations_common_update_stamp BEFORE INSERT OR UPDATE ON allocations
    FOR EACH ROW EXECUTE PROCEDURE common_update_stamp();


\i grants.sql
