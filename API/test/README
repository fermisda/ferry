FERRY/Tavern Testing System

Info:
The automated test creation works by acquiring parameter rules for an API and creating all possible combinations to use that API.
The program creates tests that disregard parameter rules (such as if it is required or not), to include error testing.
A tavern.yaml file is created by getting the output from a specific API call and loading the output in.
After the test file is created, it is executed and the Tavern and python output is logged.

Setup:
In "tavern_ingest.config", give URL for API to test ("testhost") and URL for API to test against ("hostname").
Add paths to cert, key, ca as well.
git-pull.sh is meant to be used a CRON job to update the API source code from the repository.
It can be ran manually. Otherwise, supply environment variables to relevant repository to update tested code from.

Executing:
While in the directory "test" (in the directory "API") run the command in the format:

    python3 tavern_ingest.py -c tavern_ingest.config -n  [API Name]
    
with the desired API to test following the "-n" (case sensitive, no brackets)
Instead of an API name, "all" can be used, but will not completely test with refactoring being incomplete. 
"all" is based on api_names, so any new APIs should be added to that file.

To retest created tavern.yaml files run the command (exact file name, no brackets):

    tavern-ci [test_name].tavern.yaml

Logs are outputted to full_output (unrestricted logs) and concise_output (less verbose but more comprehensive)
Tavern.yaml files are removed with each new test run (rm test_* is ran) and fermicloud033 is refreshed from cdpgsprd 
(this can be changed in db_refresh.sh/db_connect_test_cleanup.sh)

Potential Improvements:
A big issue within the API is thoroughly testing insertion. 
Many times the test will simply result in testing error due to the generic nature of the input parameters
to never actually do anything, for instance, since there already is a "test" user, it can't be added. 
Furthermore, input for each test is based on variable type. Could be further improved by testing attribute specific test values.

Output also should be tweaked to best satisfy requirements. This can be done within the "logCleaner" or "logFaultOnly" functions in tavern_ingest.py.
full_output shows all Tavern and logging output from the script
concise_output only shows only error/critical logging from Tavern and some logging from the script
fault_output only shows error/critical logging from concise_output, will be empty if there are no errors




